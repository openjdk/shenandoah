import java.text.MessageFormat

apply plugin: 'jdk'

def sourceDir = file("$rootDir")
def editableSource = file("$buildDir/editable-source")

jdkBuild {
    imageDir = file("$brazilGradle.buildDir/jdk-16")
}

ext {
    arch = ['uname', '-m'].execute().text.trim()
    switch (arch) {
        case 'aarch64':
            arch_alias = arch
            break;
        case 'x86_64':
            arch_alias = 'amd64'
            break;
        default:
            throw new GradleException("${arch} is not suported")
    }
}

validation {
    internalVersion = MessageFormat.format('OpenJDK 64-Bit Server VM ({0}+{1}) for linux-{2} JRE ({0}+{1})',
                                           project.jdkversion, project.build, arch_alias)
}

task conf(type: Exec) {
    commandLine = [
            'bash',
            "$sourceDir/configure",
            '--with-jvm-features=zgc',
            '--with-version-feature=16',
            '--with-version-build=' + project.build,
            '--with-version-pre=',
            '--with-version-opt=',
            '--with-x=' + bp('[X11Libs]lib.libfarm').file.toString(),
            '--with-cups=' + bp('[Cups]lib.libfarm').file.toString(),
            '--with-fontconfig=' + bp('[Fontconfig]lib.libfarm').file.toString(),
            '--with-freetype=bundled',
            '--with-alsa=' + bp('[AlsaLib]lib.libfarm').file.toString()
    ]
    workingDir editableSource
    outputs.file "$editableSource/configure-support/config.log"
    inputs.dir 'src'
}

task images(type: Exec, dependsOn: conf) {
    commandLine 'make', 'images'
    workingDir editableSource
    outputs.dir "$editableSource/images/jdk"
    inputs.dir 'src'
}

task testImages(type: Exec, dependsOn: conf) {
    commandLine 'make', 'test-image-hotspot-jtreg-native','test-image-jdk-jtreg-native'
    workingDir editableSource
    outputs.dir "$editableSource/images/test"
    inputs.dir 'src'
}

task docs(type: Exec, dependsOn: images) {
    commandLine 'make', 'docs'
    workingDir editableSource
    outputs.dir "$editableSource/images/docs"
    inputs.dir 'src'
}

task copyArtifacts(type: Copy) {
    from(images) {
        into 'jdk-16'
    }
    from(testImages) {
        into 'testimage'
    }
    from(docs) {
        into 'brazil-documentation'
    }
    from("$editableSource/images/jdk/lib/src.zip") {
        into 'generated-src'
    }
    into brazilGradle.buildDir
}

publishMetadata.mustRunAfter(copyArtifacts)
task assembleOutput {
    dependsOn copyArtifacts
    dependsOn publishMetadata
}

task test {
    dependsOn checkMetadata
    mustRunAfter assembleOutput
}

task release {
    dependsOn assembleOutput
    dependsOn test
}
